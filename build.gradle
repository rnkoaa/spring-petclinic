/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.1/userguide/tutorial_java_projects.html
 */

// plugins {
    // Apply the java plugin to add support for Java
    // id 'java'

    // Apply the application plugin to add support for building an application
    // id 'application'
// }

// repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    // jcenter()
// }

// dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    // implementation 'com.google.guava:guava:26.0-jre'

    // Use JUnit test framework
    // testImplementation 'junit:junit:4.12'
// }

// Define the main class for the application
// mainClassName = 'spring.petclinic.App'
buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(
          "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'idea'
//    id 'org.springframework.boot'
}

subprojects {
    
    afterEvaluate {
        repositories {
            jcenter()
        }

        apply plugin: 'org.springframework.boot'

        dependencies {
            testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.2"
            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.2"

            testCompileOnly "junit:junit:4.12"
            testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.3.2"
        }

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'junit',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            useJUnitPlatform()

            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }
    }
}

